from enum import IntEnum
from telebot import types
from typing import Callable
from main import bot
from utils.storage import load_users, save_users
from utils.session import set_user_session, get_user_session, clear_user_state
from utils.validation import normalize_time, is_end_after_start
from utils.messages import tracker
from utils.schedule import add_block, edit_block, delete_block, copy_day


DAYS_RU = {
    'monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
    'wednesday': '–°—Ä–µ–¥–∞',
    'thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
    'friday': '–ü—è—Ç–Ω–∏—Ü–∞',
    'saturday': '–°—É–±–±–æ—Ç–∞',
    'sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
}

DAYS_CUT = {
    'day_mon': 'monday',
    'day_tue': 'tuesday',
    'day_wed': 'wednesday',
    'day_thu': 'thursday',
    'day_fri': 'friday',
    'day_sat': 'saturday',
    'day_sun': 'sunday',
}


class BlockStep(IntEnum):
    DELETE = -1
    ASK_INDEX = 0
    ASK_TITLE = 1
    ASK_START = 2
    ASK_END = 3


def ask(user_id, chat_id, text):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID —á–µ—Ä–µ–∑ MessageTracker
    """
    msg = bot.send_message(chat_id, text)
    tracker.track(user_id, msg.message_id)
    return msg


def is_change_action_complete(user_id: int, chat_id: int, check_func: Callable[..., bool]) -> None:
    """
    check_func - –ª—é–±–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è bool.
    """
    if check_func:
        ask(user_id, chat_id,
            f'‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.')
    else:
        ask(user_id, chat_id,
            f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')
    tracker.clear(chat_id, user_id)


def build_day_buttons(back_to: str = 'main_back', suffix: str = ''):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–µ–Ω—é –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ + –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥".
    back_to - callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    """
    buttons = [(name, f'day_{cut[:3]}'+suffix)
               for cut, name in DAYS_RU.items()]
    buttons.append(('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', back_to))  # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    l = len(buttons)
    half = l//2

    rows = []
    for i in range(half):
        row = []
        # –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        text1, cb1 = buttons[i]
        row.append(types.InlineKeyboardButton(text1, callback_data=cb1))

        # –ø—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i + half < l:
            text2, cb2 = buttons[i + half]
            row.append(types.InlineKeyboardButton(text2, callback_data=cb2))

        rows.append(row)

    return rows


def day_actions_markup(back_to: str = 'schedule') -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ + –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥".
    """
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(
            '‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data='block_add_choice'),
        types.InlineKeyboardButton(
            '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='block_edit')
    )
    markup.add(
        types.InlineKeyboardButton(
            '‚úñÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data='block_delete_choice'),
        types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=back_to)
    )
    return markup


def format_day_text(day_name: str, day_data: list) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
    """
    text = f'üìÖ <b>{day_name}</b>:\n<pre>'
    for i, block in enumerate(day_data, 1):
        text += f'{i}. {block["title"]}\n‚è∞ {block["start"]} ‚Äì {block["end"]}\n\n'
    text += '</pre>'
    return text


def refresh_day_view(user_id: int, chat_id: int, message_id: int):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
    –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    users = load_users()
    state_day = get_user_session(user_id, 'day')
    day = DAYS_CUT[state_day]
    day_name = DAYS_RU[day]
    day_data = users[str(user_id)]['schedule'][day]
    try:
        bot.edit_message_caption(
            caption=format_day_text(day_name, day_data),
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=day_actions_markup(back_to='schedule'),
            parse_mode='html'
        )
    except:
        pass


@bot.callback_query_handler(func=lambda call: call.data == 'schedule')
def callback_schedule(call):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏.
    """
    markup = types.InlineKeyboardMarkup()
    for row in build_day_buttons():
        markup.row(*row)
    bot.edit_message_caption(
        caption='–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:',
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup,
        parse_mode='html'
    )


@bot.callback_query_handler(func=lambda call: call.data in DAYS_CUT.keys())
def callback_day(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
    """
    set_user_session(call.from_user.id, 'day', call.data)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID "–æ—Å–Ω–æ–≤–Ω–æ–≥–æ" —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    set_user_session(call.from_user.id, 'day_message_id',
                     call.message.message_id)

    day_name = DAYS_RU.get(DAYS_CUT[call.data], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å')
    users = load_users()
    day_data = users[str(call.from_user.id)]['schedule'][DAYS_CUT[call.data]]

    bot.edit_message_caption(
        caption=format_day_text(day_name, day_data),
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=day_actions_markup(back_to='schedule'),
        parse_mode='html'
    )


@bot.callback_query_handler(func=lambda call: call.data == 'block_add_choice')
def callback_block_add_choice(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å'.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é: –¥–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å.
    """
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(
            '‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫', callback_data='block_add'),
        types.InlineKeyboardButton(
            'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å', callback_data='block_copy')
    )
    markup.add(
        types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=get_user_session(
            call.from_user.id, 'day'))
    )

    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == 'block_delete_choice')
def callback_block_delete_choice(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å'.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é: —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –¥–µ–Ω—å.
    """
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(
            '‚úñÔ∏è –£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫', callback_data='block_delete'),
        types.InlineKeyboardButton(
            'üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–µ–Ω—å', callback_data='day_clear')
    )
    markup.add(
        types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=get_user_session(
            call.from_user.id, 'day'))
    )

    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == 'block_copy')
def callback_block_copy(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å'.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    markup = types.InlineKeyboardMarkup()
    for row in build_day_buttons('block_add_choice', suffix='_copy'):
        markup.row(*row)

    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data == 'day_clear')
def callback_day_clear(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—á–∏—Å—Ç–∏—Ç—å –¥–µ–Ω—å'.
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –±–ª–æ–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    users = load_users()
    day = DAYS_CUT[get_user_session(call.from_user.id, 'day')]
    users[str(call.from_user.id)]['schedule'][day] = []
    save_users(users)
    refresh_day_view(call.from_user.id, call.message.chat.id,
                     call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('day_') and call.data.endswith('_copy'))
def callback_day_copy(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è.
    –ö–æ–ø–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –¥—Ä—É–≥–æ–π.
    """
    # –î–µ–Ω—å, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ
    day_to = DAYS_CUT[get_user_session(call.from_user.id, 'day')]
    # –û—Ç–∫—É–¥–∞ –∫–æ–ø–∏—Ä—É–µ–º
    day_from = DAYS_CUT[call.data.removesuffix('_copy')]

    is_change_action_complete(
        call.from_user.id,
        call.message.chat.id,
        lambda: copy_day(
            call.from_user.id,
            day_to, day_from
        )
    )
    refresh_day_view(call.from_user.id, call.message.chat.id,
                     call.message.message_id)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == 'block_add')
def callback_block_add(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫'.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞.
    """
    user_id = call.from_user.id
    day = get_user_session(user_id, 'day')
    day_message_id = get_user_session(user_id, 'day_message_id')
    set_user_session(user_id, 'state', {
        'action': 'add',
        'day': day,
        'day_message_id': day_message_id,
        'step': BlockStep.ASK_TITLE,
        'data': {'title': '', 'start': '', 'end': '', 'index': ''},
    })
    ask(user_id, call.message.chat.id,
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ (–º–∞–∫—Å. 20 —Å–∏–º–≤–æ–ª–æ–≤):')


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == 'block_edit')
def callback_block_edit(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫'.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞.
    """
    user_id = call.from_user.id
    day = get_user_session(user_id, 'day')
    day_message_id = get_user_session(user_id, 'day_message_id')
    set_user_session(user_id, 'state', {
        'action': 'edit',
        'day': day,
        'day_message_id': day_message_id,
        'step': BlockStep.ASK_INDEX,
        'data': {'title': '', 'start': '', 'end': '', 'index': ''},
    })
    ask(user_id, call.message.chat.id,
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å:')


# –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == 'block_delete')
def callback_block_delete(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫'.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∞.
    """
    user_id = call.from_user.id
    day = get_user_session(user_id, 'day')
    day_message_id = get_user_session(user_id, 'day_message_id')
    set_user_session(user_id, 'state', {
        'action': 'delete',
        'day': day,
        'day_message_id': day_message_id,
        'step': BlockStep.DELETE,
        'data': {'title': '', 'start': '', 'end': '', 'index': ''},
    })
    ask(user_id, call.message.chat.id,
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: get_user_session(message.from_user.id, 'state') is not None and not message.text == '/start')
def handle_block_entry(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∞.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é (step).
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    state = get_user_session(user_id, 'state')
    day = DAYS_CUT[state['day']]

    step = state['step']
    if step is not None:
        step = BlockStep(step)

    tracker.track(user_id, message.message_id)

    if step == BlockStep.DELETE:
        state['data']['index'] = int(message.text)
        is_change_action_complete(user_id, chat_id, lambda: delete_block(
            user_id, day, state['data']['index']))
        refresh_day_view(message.from_user.id,
                         message.chat.id, get_user_session(user_id, 'day_message_id'))
        clear_user_state(user_id)
        tracker.clear(chat_id, user_id)

    elif step == BlockStep.ASK_INDEX:
        state['data']['index'] = int(message.text)
        state['step'] = BlockStep.ASK_TITLE
        set_user_session(user_id, 'state', state)
        ask(user_id, chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤):')

    elif step == BlockStep.ASK_TITLE:
        state['data']['title'] = message.text[:20]
        state['step'] = BlockStep.ASK_START
        set_user_session(user_id, 'state', state)
        ask(user_id, chat_id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ß–ß:–ú–ú):')

    elif step == BlockStep.ASK_START:
        start = normalize_time(message.text)
        if start:
            state['data']['start'] = start
            state['step'] = BlockStep.ASK_END
            set_user_session(user_id, 'state', state)
            ask(user_id, chat_id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ß–ß:–ú–ú):')
        else:
            ask(user_id, chat_id, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 09:30).')

    elif step == BlockStep.ASK_END:
        end = normalize_time(message.text)
        if end:
            state['data']['end'] = end
            if is_end_after_start(state['data']['start'], end):
                if state['action'] == 'add':
                    is_change_action_complete(user_id, chat_id,
                                              lambda: add_block(
                                                  user_id=user_id,
                                                  day=day,
                                                  title=state['data']['title'],
                                                  start=state['data']['start'],
                                                  end=end))
                    refresh_day_view(message.from_user.id,
                                     message.chat.id, get_user_session(user_id, 'day_message_id'))
                elif state['action'] == 'edit':
                    is_change_action_complete(user_id, chat_id,
                                              lambda: edit_block(
                                                  user_id=user_id,
                                                  day=day,
                                                  index=state['data']['index'],
                                                  title=state['data']['title'],
                                                  start=state['data']['start'],
                                                  end=end))
                    refresh_day_view(message.from_user.id,
                                     message.chat.id, get_user_session(user_id, 'day_message_id'))
                clear_user_state(user_id)  # –æ—á–∏—Å—Ç–∫–∞
                tracker.clear(chat_id, user_id)
            else:
                ask(user_id, chat_id,
                    '‚ö†Ô∏è –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        else:
            ask(user_id, chat_id,
                '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 10:00).')
